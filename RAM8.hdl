// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    //We will use a DMux8Way to select which register we want to load on and a Mux8Way to select which signal we
    //want to read. If load = 0 and adresss = 000 then we will read register labled 0. If load = 1 and andress = 000
    //Then we will put our indata into register one. All the other outputs from the DMux and mux will be zero, 
    //which means the data in not choosen registers will be unchanged
    DMux8Way(in=load, sel=address, a=reg0in, b=reg1in, c=reg2in, d=reg3in, e=reg4in, f=reg5in, g=reg6in, h=reg7in); //For fun i wanted to consturct this myself altough it's not mandatory 
    Register(in=in, load=reg0in, out=reg0out);
    Register(in=in, load=reg1in, out=reg1out);
    Register(in=in, load=reg2in, out=reg2out);
    Register(in=in, load=reg3in, out=reg3out);
    Register(in=in, load=reg4in, out=reg4out);
    Register(in=in, load=reg5in, out=reg5out);
    Register(in=in, load=reg6in, out=reg6out);
    Register(in=in, load=reg7in, out=reg7out);
    Mux8Way16(a=reg0out, b=reg1out, c=reg2out, d=reg3out, e=reg4out, f=reg5out, g=reg6out, h=reg7out, sel=address, out=out); //Dont have this either, again consturct it for fun

}