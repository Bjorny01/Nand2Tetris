// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A Mux to choose if the A register either loads the innstruction, in case of an Ainstruction or, or the ALUoutput, incase of a Dintruction and that the destination is the Aregister
    Not(in=instruction[15], out=notMSB);
    Mux16(a=ALUoutput, b=instruction, sel=notMSB, out=Ain);
    Or(a=instruction[5], b=notMSB, out=d1ornotMSB);
    ARegister(in=Ain, load=d1ornotMSB, out=A, out[0..14]=addressM);

    //A Mux to choose if we use the value from the Aregister, incase a=0m or from Memory, in case a=1 (where a=instruction[12])
    Mux16(a=A, b=inM, sel=instruction[12], out=AorM);

    //The D register always have the ALUoutput as input, it should load if we have a Cinstruction and d2=1 (which means destination is set to Dregister)
    //A And to check if it's both Cinstruction and dest is set to DRegister (d2=1)
    And(a=instruction[4], b=instruction[15], out=d2andMSB);
    DRegister(in=ALUoutput, load=d2andMSB, out=D);

    //The ALU fixes all the logical operations, for the control of the ALU zx=c1, nx=c2, zy=c3, ny=c4, f=c5, no=c6
    ALU(x=D, y=AorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUoutput, out=outM, zr=zero, ng=neg);

    //For WriteM, we both need it to be a Cinstruction and for the destination to be set to Memory (d3)
    And(a=instruction[3], b=instruction[15], out=writeM);

    //For the program counter we check with zr and ng flags from ALUoutput and compare with j1, j2 and j3 which decides when we jump	
    And(a=instruction[2], b=neg, out=jlt);		//If out is negative and j1 is 1 --> jump
    And(a=instruction[1], b=zero, out=jeq);		//If out is zero and j2 is 1 --> jmp
    Not(in=neg, out=posorzero);				//Just used to check if positive, pos=!ng   
    Not(in=zero, out=notzero);
    And(a=posorzero, b=notzero, out=positive);
    And(a=instruction[0], b=positive, out=jgt); 	//If ouut is positive and j3 is 1 --> jmp
    //Now we use a tripple, two normal, or gate to get all the combinations of these options
    Or(a=jlt, b=jeq, out=w1);
    Or(a=w1, b=jgt, out=w2);
    And(a=instruction[15], b=w2, out=loadpc);
    //If nothing for load into the pc is true we increment, so incrent is always true
    PC(in=A, load=loadpc, inc=true, reset=reset, out[0..14]=pc);
    

}