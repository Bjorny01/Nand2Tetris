// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    //First Mux16 with zx and zy as inputs to choose if we want to zero x or y
    Mux16(a=x, b[0..15]=false, sel=zx, out=w1); //w1 = x after first mux 
    Mux16(a=y, b[0..15]=false, sel=zy, out=w2); //w2 = y after first mux
    
    //Second Mux16 take the input from the first mux and either negates it or let it through as is
    Not16(in=w1, out=notw1);
    Mux16(a=w1, b=notw1, sel=nx, out=w11); //w11 = x after second mux
    Not16(in=w2, out=notw2);
    Mux16(a=w2, b=notw2, sel=ny, out=w22); //w22 = y after second mux

    //Now we calculate both x + y and x&y, then use a Mux16 with select as f to choose which will be our output
    Add16(a=w11, b=w22, out=outadd);
    And16(a=w11, b=w22, out=outand);
    Mux16(a=outand, b=outadd, sel=f, out=outf);

    //Now we choose if we want to negate the output with no as select signal, this as well with a Mux16
    Not16(in=outf, out=notoutf);
    Mux16(a=outf, b=notoutf, sel=no, out=out, out[15]=ng, out[0..7]=foror8Way1, out[8..15]=foror8Way2);

    //For the flags:
    //For ng, to check if negative we check our outputs MSB, if 1 then ng is 1, if 0 then ng is 0, done in the Mux16 above
    //For zr we invert the output and check with an And16Way if all bits of our output are 0
    //However it turns out an And16Way is quite difficult to construct, we can use bubbelpushing and
    //insted use a Nor16Way, which is just a Or16Way with and inverter in front of it
    //which is just two Or8Way, one Or and one inverter, in that order
    //Values taken from output from the Mux16 that gives the output (see above)
    Or8Way(in=foror8Way1, out=outzr1); //Or8Way1
    Or8Way(in=foror8Way2, out=outzr2); //Or8Way2
    Or(a=outzr1, b=outzr2, out=outzr);
    Not(in=outzr, out=zr);
        
}